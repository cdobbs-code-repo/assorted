#hex to dec conversion
def hex_to_dec(foo):
    letts = " abcdef"
    if foo[0] in letts:
        num1 = 9 + letts.index(foo[0])
    else:
        num1 = int(foo[0])
    if foo[1] in letts:
        num0 = 9 + letts.index(foo[1])
    else:
        num0 = int(foo[1])
    return num1*16 + num0

def ascii_to_letter(foo):
    low_lett = "abcdefghijklmnopqrstuvwxyz"
    upp_lett = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    numbers = "0123456789"
    if foo == 33:
        return "!"
    if foo == 123:
        return "{"
    if foo == 125:
        return "}"
    if foo == 95:
        return "_"
    if foo == 27:
        return "'"
    if foo == 44:
        return ","
    if foo == 46:
        return "."
    if foo == 32:
        return " "
    if foo == 63:
        return "?"
    if foo == 42:
        return "*"
    if foo == 43:
        return "+"
    if foo == 45:
        return "-"
    if foo == 47:
        return "/"
    if foo > 47 and foo < 58:
        return numbers[foo - 48]
    if foo > 96 and foo < 123:
        return low_lett[foo - 97]
    if foo > 64 and foo < 91:
        return upp_lett[foo - 65]
    #otherwise
    return "*"

def letter_to_ascii_hex(letter):
    return hex(ord(letter))[2:].upper()

#print(letter_to_ascii_hex("'"))

# Returning one byte (8 bits)
def hex_to_bin(foo):
    myarr = ["0000",
    "0001",
    "0010",
    "0011",
    "0100",
    "0101",
    "0110",
    "0111",
    "1000",
    "1001",
    "1010",
    "1011",
    "1100",
    "1101",
    "1110",
    "1111"]

    num2 = foo[0]
    if num2 == "A":
        num2 = "1010"
    elif num2 == "B":
        num2 = "1011"
    elif num2 == "C":
        num2 = "1100"
    elif num2 == "D":
        num2 = "1101"
    elif num2 == "E":
        num2 = "1110"
    elif num2 == "F":
        num2 = "1111"
    else:
        num2 = myarr[int(num2)]

    num1 = foo[1]
    if num1 == "A":
        num1 = "1010"
    elif num1 == "B":
        num1 = "1011"
    elif num1 == "C":
        num1 = "1100"
    elif num1 == "D":
        num1 = "1101"
    elif num1 == "E":
        num1 = "1110"
    elif num1 == "F":
        num1 = "1111"
    else:
        num1 = myarr[int(num1)]

    return num2 + num1


def bin_to_hex(nibble):
    if nibble == "0000":
        return "0"
    if nibble == "0001":
        return "1"
    if nibble == "0010":
        return "2"
    if nibble == "0011":
        return "3"
    if nibble == "0100":
        return "4"
    if nibble == "0101":
        return "5"
    if nibble == "0110":
        return "6"
    if nibble == "0111":
        return "7"
    if nibble == "1000":
        return "8"
    if nibble == "1001":
        return "9"
    if nibble == "1010":
        return "A"
    if nibble == "1011":
        return "B"
    if nibble == "1100":
        return "C"
    if nibble == "1101":
        return "D"
    if nibble == "1110":
        return "E"
    if nibble == "1111":
        return "F"

def b64_to_binary(foo): #*** foo must be a char ***
    mylist = [
        "000000",
        "000001",
        "000010",
        "000011",
        "000100",
        "000101",
        "000110",
        "000111",
        "001000",
        "001001",
        "001010",
        "001011",
        "001100",
        "001101",
        "001110",
        "001111",
        "010000",
        "010001",
        "010010",
        "010011",
        "010100",
        "010101",
        "010110",
        "010111",
        "011000",
        "011001",
        "011010",
        "011011",
        "011100",
        "011101",
        "011110",
        "011111",
        "100000",
        "100001",
        "100010",
        "100011",
        "100100",
        "100101",
        "100110",
        "100111",
        "101000",
        "101001",
        "101010",
        "101011",
        "101100",
        "101101",
        "101110",
        "101111",
        "110000",
        "110001",
        "110010",
        "110011",
        "110100",
        "110101",
        "110110",
        "110111",
        "111000",
        "111001",
        "111010",
        "111011",
        "111100",
        "111101",
        "111110",
        "111111"]
    b64string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    if foo == "=":
        return "00"
    elif foo not in b64string:
        return "ERROR: UNRECOGNIZED B64 CHARACTER"
    else:
        return mylist[b64string.index(foo)]



intc = 140529590095819667456853959405774411694134203313441220483497981422734512193766631886586751216843913800175863035819336234957198345407478251686696488905741610544421497150691934025870756486618399383815418089448002957439029074256130765917147481897290660627424119071516837861291961457633704435454699553412634361539665316355420484056514886443774460508284732539559573564160199522835794053878745746102417366330176254538527451432504090599519529710369635693790095550109749259284019971159451705474590537259690163215273476091103825935392313442228654176751760284871220021987504083735952504443453127682880874919243658500609268023479544901943555493799307383681675612647248097045395830842648985780112510296555758283951043001515731332869714918725755361638970552359489855057774220678991229963601715515413566780278384660563732224793101399736969097832444859131974377878530530689314042989440154716292276130864962558938788282262936243573921006390731835088861298362557288586107502357015988448213908461988721582119494385463871241226799117447684579834915593076120002896672894331745438216175134720330027872970558427027801333708710165026763283657735778022991677625367252031917019197292185459896013866974834958007656517916223654065537940164534496824922511995883

intn = 556234608427525305881981458316999047005858890631224306927952956709896704993456437533211606117424811801330003455666193135363399481306197035890845540560523790314467103495751645942091143128135764077087659007466445634645461127678433333637958209447946464164983498089871790352029843773372254840924913755128910851531950016532722327025012755615146210325298252572393158109003186255349277649986186599904201404469373824183293901354977174651881534404717745523194796885222384633926968728173842231299367024798872269928965742843054808196019623366934696035947182522503388603430424562417618790824345796607372738516615035674125511900494661209012133188287275684784146755730308213732864618241055545105601337666046366225635135068443355703641614899312419017371699591744353519431971918295979264554858836932576747534175262536072176688042079638141415404243404811362601954321802730517745473945947534649364065628939030964951471982368402054460130997947721213618736049927998971283218937179222449471169899386155590813231151328708669069073566203388307627910013538927799782806890165853883574959834156787556836364754679275014311580646876858353865366567390560903854214643791671776423086909453227460398086703726400010938188683334594363041543655763261720396746887261711

for d in range(10000,100000):

    foo = hex(pow(intc,d,intn))[2:]

    out = ""
    for i in range(0,len(foo)-2,2):
        temp = foo[i:i+2]
        out += ascii_to_letter(hex_to_dec(temp))
    if "flag" in out:
        print(out)